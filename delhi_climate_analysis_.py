# -*- coding: utf-8 -*-
"""Delhi_climate_analysis .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nWuZLQ48WaHIzfoi4odmzDVOmqvEfFvB

Aryan Shaiju-1RVU23CSE084

Mitesh K- 1RVU23CSE270
"""

import pandas as pd
df = pd.read_csv("/content/Delhi Weather 2018-06-26 to 2024-06-26.csv")
df

date_range = pd.date_range(start='2018-06-26', end='2024-06-26')
df_dates = pd.DataFrame(date_range, columns=['Datetime'])
df['Datetime'] = pd.to_datetime(df['Datetime'], errors='coerce')
df = pd.merge(df_dates, df, on='Datetime', how='left')
df['Tempmax'].interpolate(method='linear', inplace=True)
df['Tempmin'].interpolate(method='linear', inplace=True)
df['Temp'].interpolate(method='linear', inplace=True)
df['feelslikemax'].interpolate(method='linear', inplace=True)
df['feelslikemin'].interpolate(method='linear', inplace=True)
df['feelslike'].interpolate(method='linear', inplace=True)
df['dew'].interpolate(method='linear', inplace=True)
df['humidity'].interpolate(method='linear', inplace=True)
df['precip'].interpolate(method='linear', inplace=True)
df['precipprob'].interpolate(method='linear', inplace=True)
df['precipcover'].interpolate(method='linear', inplace=True)
df['snow'].interpolate(method='linear', inplace=True)
df['snowdepth'].interpolate(method='linear', inplace=True)
df['windgust'].interpolate(method='linear', inplace=True)
df['windspeed'].interpolate(method='linear', inplace=True)
df['winddir'].interpolate(method='linear', inplace=True)
df['sealevelpressure'].interpolate(method='linear', inplace=True)
df['cloudcover'].interpolate(method='linear', inplace=True)
df['visibility'].interpolate(method='linear', inplace=True)
df['solarradiation'].interpolate(method='linear', inplace=True)
df['solarenergy'].interpolate(method='linear', inplace=True)
df['uvindex'].interpolate(method='linear', inplace=True)
df['moonphase'].interpolate(method='linear', inplace=True)
df['sunrise'].fillna(method='ffill', inplace=True)
df['sunset'].fillna(method='ffill', inplace=True)
df['preciptype'].fillna('unknown', inplace=True)
df['severerisk'].fillna(df['severerisk'].mode()[0], inplace=True)
df['conditions'].fillna(df['conditions'].mode()[0], inplace=True)
df['description'].fillna(df['description'].mode()[0], inplace=True)
df['icon'].fillna(df['icon'].mode()[0], inplace=True)
df['stations'].fillna(df['stations'].mode()[0], inplace=True)
print(df.isnull().sum())

df

df.describe()

df['Temp'].mean()

# Plot the daily data to make it more congested
# Visualize temperature trends over time
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(15, 5))
plt.plot(df['Datetime'], df['Tempmax'], label='Max Temp')
plt.plot(df['Datetime'], df['Tempmin'], label='Min Temp')
plt.plot(df['Datetime'], df['Temp'], label='Average Temp')
plt.xlabel('Date')
plt.ylabel('Temperature (°C)')
plt.title('Temperature Trends Over Time')
plt.legend()
plt.show()


# Set y-axis limits to reflect the described temperature range
#MAX TEMP: it shows the highest temperatures reaching up to 50 degrees Celsius. The peaks are sharp, indicating very warm conditions during the summer months.
#AVG TEMP:it generally lies between the maximum and minimum temperatures, averaging around 20 to 30 degrees Celsius.
#MIN TEMP:it indicates the lowest temperatures, which drop to around 10 degrees Celsius during winter months.
#The temperatures for all three categories (max, min, average) appear to be relatively consistent across the years without significant long-term upward or downward trends.
# This consistency might suggest a stable climate over the observed period.



import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming 'df' is your DataFrame containing the weather data

# Select only numeric columns for correlation
numeric_df = df.select_dtypes(include=[float, int])

# Calculate the correlation matrix
corr_matrix = numeric_df.corr()

# Print the correlation matrix
corr_matrix

# Plot the heatmap
plt.figure(figsize=(15, 10))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Weather Variables')
plt.show()

"""Temperature Variables:

Strongly correlated as they measure different aspects of atmospheric heat. "Feels like" temperature closely follows actual temperature.
Temperature and Sea Level Pressure:

Inversely related: higher temperatures reduce air pressure due to decreased air density.
Solar Radiation and Solar Energy:

Perfectly correlated as they measure the same solar activity.
Solar Variables and UV Index:

Positively correlated: more solar radiation increases the UV index.
Humidity and Solar Variables:

Negatively correlated: higher solar activity reduces humidity by increasing evaporation.
Precipitation Probability and Coverage:

Strongly correlated: higher precipitation probability often leads to more extensive coverage.
"""



#Trend Analysis:


df['Year'] = df['Datetime'].dt.year
df['Month'] = df['Datetime'].dt.month

# Average temperature by year
yearly_temp = df.groupby('Year')['Temp'].mean()
plt.figure(figsize=(10, 5))
plt.plot(yearly_temp)
plt.xlabel('Year')
plt.ylabel('Average Temperature (°C)')
plt.title('Average Yearly Temperature')
plt.show()
#Trend Analysis:

#The graph starts with a decreasing trend from 2018 to 2020, where the temperature drops from around 25.2°C to approximately 24.8°C.
#There is a sharp increase in temperature in 2021, reaching a peak of about 25.6°C.
#Post-2021, the temperature sharply declines again in 2023, falling to around 24.8°C.
#From 2022 to 2023, there is a slight downward trend, indicating a gradual decrease in temperature.
#From 2023 to 2024,there is a slight upward trend,indicating a gradual increase in temperature
#The average temperature seems to be increasing over the six years.
# From 2018 to 2024, the average temperature went from 25.4(approx) degrees Celsius to 25.2(approx) degrees Celsius.
#The increase in temperature is not uniform. There seems to be a sharp increase in temperature between 2021 and 2022(basically sudden increase from 2020)
#2022 is warmest year according to graph having a average temp of 25.6
#2020 is coldest year according to graph having a average temp less than 24.8

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data
df = pd.read_csv('Delhi Weather 2018-06-26 to 2024-06-26.csv')

# Convert the 'Datetime' column to datetime format
df['Datetime'] = pd.to_datetime(df['Datetime'], format='%d-%m-%Y')

# Create a scatter plot
plt.figure(figsize=(12, 8))
sns.scatterplot(data=df, x='humidity', y='visibility', alpha=0.5)
plt.title('Humidity vs Visibility in Delhi (2018-2024)')
plt.xlabel('Humidity (%)')
plt.ylabel('Visibility (km)')
plt.show()

# Calculate correlation
correlation = df['humidity'].corr(df['visibility'])
print(f"Correlation between humidity and visibility: {correlation:.2f}")

# Show summary statistics
print("\
Summary statistics for humidity:")
print(df['humidity'].describe())
print("\
Summary statistics for visibility:")
print(df['visibility'].describe())

""" as humidity increases, visibility tends to decrease."""

#Forecasting
#Modeling
from statsmodels.tsa.holtwinters import ExponentialSmoothing

# Example using Exponential Smoothing
model = ExponentialSmoothing(df['Temp'], trend='add', seasonal='add', seasonal_periods=365)
fit = model.fit()
forecast = fit.forecast(steps=365)

plt.figure(figsize=(15, 5))
plt.plot(df['Datetime'], df['Temp'], label='Historical Data')
plt.plot(pd.date_range(start='2024-06-27', periods=365), forecast, label='Forecast')
plt.xlabel('Date')
plt.ylabel('Temperature (°C)')
plt.title('Temperature Forecast')
plt.legend()
plt.show()

# Re-defining the monthly_data variable and plotting the trends again

# Cleaning the dataset by removing non-numeric columns
numeric_df = df.select_dtypes(include=['number', 'datetime'])

# Resample the data to monthly frequency and calculate the mean
monthly_data = numeric_df.resample('M', on='Datetime').mean()

# Plot Humidity trends
plt.figure(figsize=(14, 7))
plt.plot(monthly_data.index, monthly_data['humidity'], label='Humidity', color='blue')
plt.title('Humidity Trends in Delhi (2018-2024)')
plt.xlabel('Date')
plt.ylabel('Humidity (%)')
plt.legend()
plt.show()
print('Humidity trends plotted successfully.')

# Plot Wind Speed trends
plt.figure(figsize=(14, 7))
plt.plot(monthly_data.index, monthly_data['windspeed'], label='Wind Speed', color='orange')
plt.title('Wind Speed Trends in Delhi (2018-2024)')
plt.xlabel('Date')
plt.ylabel('Wind Speed (km/h)')
plt.legend()
plt.show()
print('Wind Speed trends plotted successfully.')

"""Humidity:

Seasonal pattern: There's a clear cyclical pattern in humidity levels, with peaks typically occurring around July-August and troughs around April-May each year.

Annual variation: The humidity levels fluctuate between approximately 30% to 80% throughout the year.

Consistency: The pattern seems relatively consistent across the years, suggesting a stable climate pattern for Delhi.

Slight downward trend: There might be a subtle downward trend in overall humidity levels from 2018 to 2024, but it's not very pronounced.

Extreme values: Some years show more extreme peaks or troughs than others, which could indicate unusual weather events or climate anomalies.
"""



